package com.tickit.app.security.authentication;

import com.tickit.app.security.user.User;
import com.tickit.app.security.user.UserService;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.stream.Stream;


@Service
public class JwtService {
    public static final String COOKIE_NAME = "jwtCookie";
    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(JwtService.class);
    private static final long EXPIRE_DURATION = 24 * 60 * 60 * 1000; // 24 hour
    private static final String SECRET_KEY = "my-secret-secret";
    /**
     * Issuer of the {@link io.jsonwebtoken.Jwt}
     */
    private static final String ISSUER = "tickit";


    @NonNull
    private final UserService userService;

    @Autowired
    public JwtService(@NonNull UserService userService) {
        this.userService = userService;
    }

    /**
     * Generates a JWT from the given user data
     *
     * @param user to create the JWt for
     * @return {@link Cookie} containing the generated JWT
     */
    public Cookie generateJwtCookie(@NonNull User user) {
        final String token = Jwts.builder()
                                     .setSubject(String.format("%s,%s", user.getId(), user.getEmail()))
                                     .setIssuer(ISSUER)
                                     .setIssuedAt(new Date())
                                     .setExpiration(new Date(System.currentTimeMillis() + EXPIRE_DURATION))
                                     .signWith(SignatureAlgorithm.HS512, SECRET_KEY)
                                     .compact();

        final Cookie jwtCookie = new Cookie(COOKIE_NAME, token);
        jwtCookie.setPath("/");
        jwtCookie.setHttpOnly(true);
        return jwtCookie;
    }

    /**
     * Retrieves the JWT cookie from the given request
     *
     * @param request to be checked
     * @return valid JWT if present; otherwise {@code null}
     */
    @Nullable
    public String getJwtCookieFromRequest(HttpServletRequest request) {
        return request.getCookies() == null ? null
                       : Stream.of(request.getCookies())
                                 .filter(this::isValidJwt)
                                 .findFirst()
                                 .map(Cookie::getValue)
                                 .orElse(null);
    }

    /**
     * Checks if the given cookie is a valid JWT generated by {@link #generateJwtCookie(User)}
     *
     * @param cookie to be evaluated
     * @return {@code true} if the provided cookie is valid
     */
    public boolean isValidJwt(Cookie cookie) {
        if (!COOKIE_NAME.equals(cookie.getName())) {
            return false;
        }
        try {
            Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(cookie.getValue());
            return true;
        } catch (Exception ex) {
            LOGGER.error("Token is invalid");
        }
        return false;
    }

    /**
     * Retrieves {@link UserDetails} by parsing the given JWT
     *
     * @param token to be parsed
     * @return {@link UserDetails} if found
     */
    public UserDetails getUserDetailsFromJwt(String token) {
        String[] jwtSubject = parseClaims(token).getSubject().split(",");
        final var userName = jwtSubject[1];
        return userService.loadUserByUsername(userName);
    }

    /**
     * Parses claims of the given JWT
     *
     * @param token to be parsed
     * @return List if {@link Claims}
     */
    private Claims parseClaims(String token) {
        return Jwts.parser()
                       .setSigningKey(SECRET_KEY)
                       .parseClaimsJws(token)
                       .getBody();
    }
}
